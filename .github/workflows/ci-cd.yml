name: build-test-deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Instalar JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3. Build da aplicação e criação da imagem Docker
      - name: Build Spring Boot image
        run: mvn -B spring-boot:build-image -Dspring-boot.build-image.imageName=springboot-kind-demo:ci

      # 4. Instalar Kind
      - name: Set up kind
        uses: helm/kind-action@v1
        with:
          cluster_name: ci-cluster

      # 5. Carregar imagem no kind
      - name: Load Docker image into kind
        run: kind load docker-image springboot-kind-demo:ci --name ci-cluster

      # 6. Deploy no Kubernetes
      - name: Deploy to kind
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl rollout status deployment/springboot-demo --timeout=60s

      # 7. Instalar Ingress Controller (NGINX)
      - name: Install NGINX ingress controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=Available deployment/ingress-nginx-controller \
            --timeout=90s

      # 8. Testar health endpoint (via port-forward)
      - name: Test health endpoint
        run: |
          kubectl port-forward service/springboot-demo 8080:8080 &
          sleep 10
          curl -f http://localhost:8080/actuator/health

      # 9. Debug pods (sempre roda)
      - name: Debug pods
        if: always()
        run: |
          kubectl get pods -o wide
          kubectl describe pods
          kubectl logs -l app=springboot-demo --tail=100 || true
